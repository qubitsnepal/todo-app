{"version":3,"sources":["contexts/GlobalContext/GlobalContext.js","components/Task.js","components/TaskList.js","components/TodoForm.js","contexts/GlobalContext/GlobalProvider.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","Task","task","useContext","deleteItem","findItemById","Table","Column","taskTitle","Icon","onClick","id","className","styled","i","table","th","TaskList","Wrapper","div","TodoForm","tasks","addTask","clearAll","foundItem","editTask","change","setChange","setFoundItem","useState","inputList","setInputList","error","setError","useEffect","Container","InputWrapper","Head","Input","type","placeholder","onChange","event","target","value","Button","e","preventDefault","length","Ul","map","NoTaskText","input","button","ul","h1","GlobalProvider","props","initialState","JSON","parse","localStorage","getItem","setTasks","setItem","stringify","Provider","uuid","itemId","filter","item","find","newTasks","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.50e9c55f.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GlobalContext = createContext();\n\nexport default GlobalContext;\n","import React, { useContext } from \"react\";\nimport styled from \"styled-components\";\nimport GlobalContext from \"../contexts/GlobalContext/GlobalContext\";\n\nconst Task = ({ task }) => {\n  const { deleteItem, findItemById } = useContext(GlobalContext);\n\n  return (\n    <>\n      <Table>\n        <tr>\n          <Column>{task.taskTitle}</Column>\n          <th>\n            <Icon\n              onClick={() => deleteItem(task.id)}\n              className=\"fa fa-trash\"\n            ></Icon>\n            <Icon\n              onClick={() => findItemById(task.id)}\n              className=\"fa fa-edit\"\n            ></Icon>\n          </th>\n        </tr>\n      </Table>\n    </>\n  );\n};\n\nexport default Task;\nconst Icon = styled.i`\n  color: white;\n  padding-left: 10px;\n\n  font-size: 1.5rem;\n`;\n\nconst Table = styled.table`\n  text-align: center;\n\n  width: 94%;\n`;\nconst Column = styled.th`\n  width: 300px;\n  font-size: 1.5rem;\n`;\n","import React from \"react\";\nimport Task from \"./Task\";\nimport styled from \"styled-components\";\n\nconst TaskList = ({ task }) => {\n  return (\n    <>\n      <Wrapper>\n        <Task task={task} />\n      </Wrapper>\n    </>\n  );\n};\n\nexport default TaskList;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport TaskList from \"./TaskList\";\nimport GlobalContext from \"../contexts/GlobalContext/GlobalContext\";\n\nconst TodoForm = () => {\n  const {\n    tasks,\n    addTask,\n    clearAll,\n    foundItem,\n    editTask,\n    change,\n    setChange,\n    setFoundItem,\n  } = useContext(GlobalContext);\n  const [inputList, setInputList] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  const handleChange = (event) => {\n    setInputList(event.target.value);\n    setError(false);\n  };\n\n  const handleClick = (e) => {\n    e.preventDefault();\n    if (inputList.length > 0) {\n      if (foundItem === null) {\n        addTask(inputList);\n        setInputList(\"\");\n      } else {\n        editTask(inputList, foundItem.id);\n        setInputList(\"\");\n        setChange(false);\n        setFoundItem(null);\n      }\n    } else {\n      setError(true);\n    }\n  };\n  const handleClear = (e) => {\n    e.preventDefault();\n    clearAll();\n  };\n  useEffect(() => {\n    if (foundItem !== null) {\n      setInputList(foundItem.taskTitle);\n    } else {\n      setInputList(\"\");\n    }\n  }, [foundItem]);\n\n  return (\n    <>\n      <Container>\n        <InputWrapper>\n          <Head>TODO APP</Head>\n          <Input\n            type=\"text\"\n            placeholder=\"ADD YOUR ITEMS\"\n            onChange={handleChange}\n            value={inputList}\n          />\n          <span>{error ? \"Input field cannot be left blank!!\" : \"\"}</span>\n        </InputWrapper>\n        <br></br>\n\n        <Button onClick={handleClick}>{change ? \"UPDATE\" : \"ADD ITEM\"}</Button>\n        <Button onClick={handleClear}>CLEAR ALL</Button>\n        <Ul>\n          {tasks.length > 0 ? (\n            tasks.map((task) => <TaskList task={task} />)\n          ) : (\n            <NoTaskText>No Tasks Added!</NoTaskText>\n          )}\n        </Ul>\n      </Container>\n    </>\n  );\n};\nexport default TodoForm;\n\nconst Container = styled.div`\n  height: 850px;\n  width: 600px;\n  text-align: center;\n  color: white;\n  background-color: #353232;\n  margin: 0 auto;\n  margin-top: 40px;\n  border-radius: 10px;\n`;\nconst Input = styled.input`\n  width: 25rem;\n  background: transparent;\n  border: none;\n  border-bottom: 1px solid white;\n\n  color: white;\n  font-size: 1.4rem;\n  text-align: center;\n\n  margin-bottom: 3rem;\n`;\nconst Button = styled.button`\n  background-color: #a91f48;\n  margin-right: 1.2rem;\n  color: white;\n  border-radius: 20px;\n  height: 50px;\n  border: none;\n  width: 120px;\n  font-size: 1.2rem;\n`;\nconst Ul = styled.ul`\n  list-style: none;\n  color: white;\n  text-transform: capitalize;\n  font-size: 1.5rem;\n  margin-top: 3rem;\n  margin-left: 0;\n`;\nconst Head = styled.h1`\n  font-size: 3.5rem;\n  color: white;\n  font-weight: 400;\n  padding-bottom: 3rem;\n  padding-top: 3rem;\n`;\n\nconst NoTaskText = styled.div`\n  margin-top: 10rem;\n  font-size: 1.4rem;\n`;\nconst InputWrapper = styled.div`\n  text-align: center;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport GlobalContext from \"./GlobalContext\";\nimport uuid from \"react-uuid\";\n\nconst GlobalProvider = (props) => {\n  const initialState = JSON.parse(localStorage.getItem(\"tasks\"));\n  const [tasks, setTasks] = useState(initialState !== null ? initialState : []);\n  const [foundItem, setFoundItem] = useState(null);\n  const [change, setChange] = useState(false);\n  const addTask = (taskTitle) => {\n    setTasks([...tasks, { taskTitle, id: uuid() }]);\n  };\n  useEffect(() => localStorage.setItem(\"tasks\", JSON.stringify(tasks)), [\n    tasks,\n  ]);\n  const clearAll = () => {\n    setTasks([]);\n  };\n  const deleteItem = (itemId) => {\n    setTasks(tasks.filter((item) => item.id !== itemId));\n  };\n  const findItemById = (id) => {\n    setFoundItem(tasks.find((item) => item.id === id));\n    setChange(true);\n  };\n  const editTask = (taskTitle, id) => {\n    const newTasks = tasks.map((task) =>\n      task.id === id ? { taskTitle, id } : task\n    );\n    setTasks(newTasks);\n  };\n\n  return (\n    <>\n      <GlobalContext.Provider\n        value={{\n          tasks,\n          addTask,\n          clearAll,\n          deleteItem,\n          findItemById,\n          foundItem,\n          editTask,\n          change,\n          setChange,\n          setFoundItem,\n        }}\n      >\n        {props.children}\n      </GlobalContext.Provider>\n    </>\n  );\n};\n\nexport default GlobalProvider;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport TodoForm from \"./components/TodoForm\";\n\nimport GlobalProvider from \"./contexts/GlobalContext/GlobalProvider\";\n\nfunction App() {\n  return (\n    <>\n      <GlobalProvider>\n        <TodoForm />\n      </GlobalProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}